/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.api.javademo.controller;

import com.api.javademo.model.Account;
import java.math.BigDecimal;
import com.api.javademo.model.Branch;
import com.api.javademo.model.ErrorResponse;
import com.api.javademo.model.Statement;

import io.swagger.annotations.*;
import org.springframework.format.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-02-26T16:12:13.568+05:30")

@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    @ApiOperation(value = "", notes = "Retrieve account details ", response = Account.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 302, message = "Found", response = Void.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "API URL Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 405, message = "Method not Found", response = ErrorResponse.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = ErrorResponse.class),
        @ApiResponse(code = 429, message = "Too many Requests", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/accounts/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getAccountDetails(@ApiParam(value = "account id of the user.",required=true ) @PathVariable("accountId") String accountId,@ApiParam(value = "Global transaction Id" ,required=true) @RequestHeader(value="journeyId", required=true) String journeyId,@ApiParam(value = "User ID of the requester (as per LDAP)" ,required=true) @RequestHeader(value="originUserId", required=true) String originUserId,@ApiParam(value = "The time stamp when the request was sent to system" ,required=true) @RequestHeader(value="timeStamp", required=true) String timeStamp,@ApiParam(value = "Third party Provide ( TPP ) ID" ,required=true) @RequestHeader(value="tppId", required=true) String tppId, @NotNull@ApiParam(value = "Third party Provide ( TPP ) Application Id", required = true) @RequestParam(value = "client_id", required = true)  String clientId,@ApiParam(value = "Subscription ID of a subscriber " ,required=true) @RequestHeader(value="subscriptionId", required=true) String subscriptionId,@ApiParam(value = "Encrypted access token " ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "True / False" ,required=true) @RequestHeader(value="onlineAccessFlag", required=true) Boolean onlineAccessFlag, @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "client_secret", required = true)  String clientSecret,@ApiParam(value = "ID of the source system invoking" ) @RequestHeader(value="originSourceId", required=false) String originSourceId,@ApiParam(value = "ID of the channel from which the invocation occurred" ) @RequestHeader(value="originChannelId", required=false) String originChannelId,@ApiParam(value = "ID of the department from which the invocation occurred" ) @RequestHeader(value="originDeptId", required=false) String originDeptId,@ApiParam(value = "Employee ID of the requester (as per employee HR record)" ) @RequestHeader(value="originEmployeeId", required=false) String originEmployeeId,@ApiParam(value = "Terminal ID of the requester" ) @RequestHeader(value="originTerminalId", required=false) String originTerminalId,@ApiParam(value = "Correlation ID passed by the requesting system" ) @RequestHeader(value="correlationId", required=false) String correlationId,@ApiParam(value = "2-character iso code for preferred language.  If empty the default will be English" ) @RequestHeader(value="lang", required=false) String lang);


    @ApiOperation(value = "", notes = "Retrieve statement of transaction for an account", response = Statement.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Statement.class, responseContainer = "List"),
        @ApiResponse(code = 302, message = "Found", response = Void.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "API URL Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 405, message = "Method not Found", response = ErrorResponse.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = ErrorResponse.class),
        @ApiResponse(code = 429, message = "Too many Requests", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/accounts/{accountId}/statement",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Statement>> getAccountStatement(@ApiParam(value = "account id of the user.",required=true ) @PathVariable("accountId") String accountId,@ApiParam(value = "Global transaction Id" ,required=true) @RequestHeader(value="journeyId", required=true) String journeyId,@ApiParam(value = "User ID of the requester (as per LDAP)" ,required=true) @RequestHeader(value="originUserId", required=true) String originUserId,@ApiParam(value = "The time stamp when the request was sent to system" ,required=true) @RequestHeader(value="timeStamp", required=true) String timeStamp,@ApiParam(value = "Third party Provide ( TPP ) ID" ,required=true) @RequestHeader(value="tppId", required=true) String tppId, @NotNull@ApiParam(value = "Third party Provide ( TPP ) Application Id", required = true) @RequestParam(value = "client_id", required = true)  String clientId,@ApiParam(value = "Subscription ID of a subscriber " ,required=true) @RequestHeader(value="subscriptionId", required=true) String subscriptionId,@ApiParam(value = "Encrypted access token " ,required=true) @RequestHeader(value="Authorization", required=true) String authorization, @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "client_secret", required = true)  String clientSecret,@ApiParam(value = "ID of the source system invoking" ) @RequestHeader(value="originSourceId", required=false) String originSourceId,@ApiParam(value = "ID of the channel from which the invocation occurred" ) @RequestHeader(value="originChannelId", required=false) String originChannelId,@ApiParam(value = "ID of the department from which the invocation occurred" ) @RequestHeader(value="originDeptId", required=false) String originDeptId,@ApiParam(value = "Employee ID of the requester (as per employee HR record)" ) @RequestHeader(value="originEmployeeId", required=false) String originEmployeeId,@ApiParam(value = "Terminal ID of the requester" ) @RequestHeader(value="originTerminalId", required=false) String originTerminalId,@ApiParam(value = "Correlation ID passed by the requesting system" ) @RequestHeader(value="correlationId", required=false) String correlationId,@ApiParam(value = "2-character iso code for preferred language.  If empty the default will be English" ) @RequestHeader(value="lang", required=false) String lang,@ApiParam(value = "") @RequestParam(value = "startDate", required = false)  String startDate,@ApiParam(value = "") @RequestParam(value = "endDate", required = false)  String endDate,@ApiParam(value = "") @RequestParam(value = "maxCount", required = false)  BigDecimal maxCount);


    @ApiOperation(value = "", notes = "Retrieve all accounts for a subscription. Subscription id is in the header ", response = Account.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 302, message = "Found", response = Void.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "API URL Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 405, message = "Method not Found", response = ErrorResponse.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = ErrorResponse.class),
        @ApiResponse(code = 429, message = "Too many Requests", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getAccounts(@ApiParam(value = "Global transaction Id. " ,required=true) @RequestHeader(value="journeyId", required=true) String journeyId, @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "client_secret", required = true)  String clientSecret,@ApiParam(value = "User ID of the requester (as per LDAP)" ,required=true) @RequestHeader(value="originUserId", required=true) String originUserId,@ApiParam(value = "The time stamp when the request was sent to system" ,required=true) @RequestHeader(value="timeStamp", required=true) String timeStamp,@ApiParam(value = "Third party Provide ( TPP ) ID" ,required=true) @RequestHeader(value="tppId", required=true) String tppId, @NotNull@ApiParam(value = "Third party Provide ( TPP ) Application Id", required = true) @RequestParam(value = "client_id", required = true)  String clientId,@ApiParam(value = "Subscription ID of a subscription for which all accounts need to be retrieved" ,required=true) @RequestHeader(value="subscriptionId", required=true) String subscriptionId,@ApiParam(value = "Encrypted access token " ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "True / False" ,required=true) @RequestHeader(value="onlineAccessFlag", required=true) Boolean onlineAccessFlag,@ApiParam(value = "ID of the source system invoking" ) @RequestHeader(value="originSourceId", required=false) String originSourceId,@ApiParam(value = "ID of the channel from which the invocation occurred" ) @RequestHeader(value="originChannelId", required=false) String originChannelId,@ApiParam(value = "ID of the department from which the invocation occurred" ) @RequestHeader(value="originDeptId", required=false) String originDeptId,@ApiParam(value = "Employee ID of the requester (as per employee HR record)" ) @RequestHeader(value="originEmployeeId", required=false) String originEmployeeId,@ApiParam(value = "Terminal ID of the requester" ) @RequestHeader(value="originTerminalId", required=false) String originTerminalId,@ApiParam(value = "Correlation ID passed by the requesting system" ) @RequestHeader(value="correlationId", required=false) String correlationId,@ApiParam(value = "2-character iso code for preferred language.  If empty the default will be English" ) @RequestHeader(value="lang", required=false) String lang);


    @ApiOperation(value = "", notes = "Retrieve available balance for an account ", response = Account.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 302, message = "Found", response = Void.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "API URL Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 405, message = "Method not Found", response = ErrorResponse.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = ErrorResponse.class),
        @ApiResponse(code = 429, message = "Too many Requests", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/accounts/{accountId}/balance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getAvailableBalance(@ApiParam(value = "account id of the user.",required=true ) @PathVariable("accountId") String accountId,@ApiParam(value = "Global transaction Id" ,required=true) @RequestHeader(value="journeyId", required=true) String journeyId,@ApiParam(value = "User ID of the requester (as per LDAP)" ,required=true) @RequestHeader(value="originUserId", required=true) String originUserId,@ApiParam(value = "The time stamp when the request was sent to system" ,required=true) @RequestHeader(value="timeStamp", required=true) String timeStamp,@ApiParam(value = "Third party Provide ( TPP ) ID" ,required=true) @RequestHeader(value="tppId", required=true) String tppId, @NotNull@ApiParam(value = "Third party Provide ( TPP ) Application Id", required = true) @RequestParam(value = "client_id", required = true)  String clientId,@ApiParam(value = "Subscription ID of a subscriber " ,required=true) @RequestHeader(value="subscriptionId", required=true) String subscriptionId,@ApiParam(value = "Encrypted access token " ,required=true) @RequestHeader(value="Authorization", required=true) String authorization, @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "client_secret", required = true)  String clientSecret,@ApiParam(value = "ID of the source system invoking" ) @RequestHeader(value="originSourceId", required=false) String originSourceId,@ApiParam(value = "ID of the channel from which the invocation occurred" ) @RequestHeader(value="originChannelId", required=false) String originChannelId,@ApiParam(value = "ID of the department from which the invocation occurred" ) @RequestHeader(value="originDeptId", required=false) String originDeptId,@ApiParam(value = "Employee ID of the requester (as per employee HR record)" ) @RequestHeader(value="originEmployeeId", required=false) String originEmployeeId,@ApiParam(value = "Terminal ID of the requester" ) @RequestHeader(value="originTerminalId", required=false) String originTerminalId,@ApiParam(value = "Correlation ID passed by the requesting system" ) @RequestHeader(value="correlationId", required=false) String correlationId,@ApiParam(value = "2-character iso code for preferred language.  If empty the default will be English" ) @RequestHeader(value="lang", required=false) String lang);


    @ApiOperation(value = "", notes = "Retrieve all bank branches", response = Branch.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Branch.class, responseContainer = "List"),
        @ApiResponse(code = 302, message = "Found", response = Void.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "API URL Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 405, message = "Method not Found", response = ErrorResponse.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = ErrorResponse.class),
        @ApiResponse(code = 429, message = "Too many Requests", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/banks/branches",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Branch>> getBranches(@ApiParam(value = "Global Transaction id/Journey ID" ,required=true) @RequestHeader(value="journeyId", required=true) String journeyId,@ApiParam(value = "User ID of the requester (as per LDAP)" ,required=true) @RequestHeader(value="originUserId", required=true) String originUserId,@ApiParam(value = "The time stamp when the request was sent to system" ,required=true) @RequestHeader(value="timeStamp", required=true) String timeStamp,@ApiParam(value = "Third party Provide ( TPP ) ID" ,required=true) @RequestHeader(value="tppId", required=true) String tppId, @NotNull@ApiParam(value = "Third party Provide ( TPP ) Application Id", required = true) @RequestParam(value = "client_id", required = true)  String clientId,@ApiParam(value = "Subscription ID of a subscriber " ,required=true) @RequestHeader(value="subscriptionId", required=true) String subscriptionId,@ApiParam(value = "Encrypted access token " ,required=true) @RequestHeader(value="Authorization", required=true) String authorization, @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "client_secret", required = true)  String clientSecret,@ApiParam(value = "ID of the source system invoking" ) @RequestHeader(value="originSourceId", required=false) String originSourceId,@ApiParam(value = "ID of the channel from which the invocation occurred" ) @RequestHeader(value="originChannelId", required=false) String originChannelId,@ApiParam(value = "ID of the department from which the invocation occurred" ) @RequestHeader(value="originDeptId", required=false) String originDeptId,@ApiParam(value = "Employee ID of the requester (as per employee HR record)" ) @RequestHeader(value="originEmployeeId", required=false) String originEmployeeId,@ApiParam(value = "Terminal ID of the requester" ) @RequestHeader(value="originTerminalId", required=false) String originTerminalId,@ApiParam(value = "Correlation ID passed by the requesting system" ) @RequestHeader(value="correlationId", required=false) String correlationId,@ApiParam(value = "2-character iso code for preferred language.  If empty the default will be English" ) @RequestHeader(value="lang", required=false) String lang);

}
